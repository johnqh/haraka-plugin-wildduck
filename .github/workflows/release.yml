on:
    push:
        branches:
            - master

env:
    REGISTRY: ghcr.io
    DOCKERHUB_REGISTRY: docker.io
    IMAGE_NAME: ${{ github.event.repository.name }}
    PACKAGE_NAME: ${{ github.event.repository.name }}
    NPM_MODULE_NAME: "haraka-plugin-wildduck"

name: release
jobs:
    release_please:
        permissions:
            contents: write
            pull-requests: write
            id-token: write

        runs-on: ubuntu-latest
        outputs:
            major: ${{ steps.release.outputs.major }}
            minor: ${{ steps.release.outputs.minor }}
            patch: ${{ steps.release.outputs.patch }}
            release_created: ${{ steps.release.outputs.release_created }}
            version: ${{ steps.get_version.outputs.version }}
            version_tag: ${{ steps.get_version.outputs.version_tag }}
        steps:
            - uses: google-github-actions/release-please-action@v3
              id: release
              with:
                  release-type: node
                  package-name: ${{ env.NPM_MODULE_NAME }}
                  pull-request-title-pattern: 'chore${scope}: release ${version} [skip-ci]'
            
            - name: Get version info
              id: get_version
              run: |
                  if [[ "${{ steps.release.outputs.release_created }}" == "true" ]]; then
                    VERSION="${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.${{ steps.release.outputs.patch }}"
                    echo "version=$VERSION" >> $GITHUB_OUTPUT
                    echo "version_tag=v$VERSION" >> $GITHUB_OUTPUT
                    echo "Version: $VERSION"
                  else
                    echo "version=" >> $GITHUB_OUTPUT
                    echo "version_tag=" >> $GITHUB_OUTPUT
                    echo "No release created"
                  fi
            
            # The logic below handles the npm publication:
            - uses: actions/checkout@v4
              # these if statements ensure that a publication only occurs when
              # a new release is created:
              if: ${{ steps.release.outputs.release_created }}
            - uses: actions/setup-node@v4
              with:
                  node-version: 18
                  registry-url: 'https://registry.npmjs.org'
              if: ${{ steps.release.outputs.release_created }}
            - run: npm ci
              if: ${{ steps.release.outputs.release_created }}
            - run: npm publish --provenance --access public
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
              if: ${{ steps.release.outputs.release_created }}

            - name: Notify deployment success
              if: success() && steps.release.outputs.release_created
              run: |
                  if [[ -n "${{ secrets.ZONE_WEBHOOK_URL }}" ]]; then
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"channel":"haraka-plugin-changelog", "text":"üöÄ *Release ${{ steps.get_version.outputs.version }}* deployed successfully!\n‚Ä¢ NPM: https://www.npmjs.com/package/haraka-plugin-wildduck/v/${{ steps.get_version.outputs.version }}\n‚Ä¢ Docker: `docker pull ${{ secrets.DOCKERHUB_USERNAME }}/haraka-plugin-wildduck:${{ steps.get_version.outputs.version_tag }}`\n‚Ä¢ GitHub: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.version_tag }}"}' \
                    ${{ secrets.ZONE_WEBHOOK_URL }} || echo "Slack notification failed"
                  else
                    echo "ZONE_WEBHOOK_URL not configured, skipping notification"
                  fi

            - name: Notify deployment failure  
              if: failure() && steps.release.outputs.release_created
              run: |
                  if [[ -n "${{ secrets.ZONE_WEBHOOK_URL }}" ]]; then
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"channel":"haraka-plugin-changelog", "text":"‚ùå *Release deployment FAILED* for commit ${{ github.sha }}\nCheck: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
                    ${{ secrets.ZONE_WEBHOOK_URL }} || echo "Slack notification failed"
                  else
                    echo "ZONE_WEBHOOK_URL not configured, skipping notification"
                  fi

    publish_docker:
        name: Create and publish a Docker image
        runs-on: ubuntu-latest

        permissions:
            contents: read
            packages: write
            attestations: write
            id-token: write

        needs: release_please
        if: ${{ needs.release_please.outputs.release_created }}

        steps:
            - run: echo version ${{ needs.release_please.outputs.version_tag }}

            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3
              with:
                  platforms: 'arm64'

            - name: Set up Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v3
              with:
                  platforms: linux/arm64,linux/amd64

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.repository_owner }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata for DockerHub
              id: meta_dockerhub
              uses: docker/metadata-action@v5
              with:
                  images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
                  flavor: |
                      latest=auto
                  tags: |
                      type=semver,pattern={{version}},value=${{ needs.release_please.outputs.version_tag }}
                      type=semver,pattern={{major}}.{{minor}},value=${{ needs.release_please.outputs.version_tag }}
                      type=semver,pattern={{major}},value=${{ needs.release_please.outputs.version_tag }}

            - name: Extract metadata for GitHub Registry
              id: meta_ghcr
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ github.repository }}
                  flavor: |
                      latest=auto
                  tags: |
                      type=semver,pattern={{version}},value=${{ needs.release_please.outputs.version_tag }}
                      type=semver,pattern={{major}}.{{minor}},value=${{ needs.release_please.outputs.version_tag }}
                      type=semver,pattern={{major}},value=${{ needs.release_please.outputs.version_tag }}

            - name: Build and push Docker image
              id: push
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: true
                  platforms: ${{ steps.buildx.outputs.platforms }}
                  tags: |
                      ${{ steps.meta_dockerhub.outputs.tags }}
                      ${{ steps.meta_ghcr.outputs.tags }}
                  labels: ${{ steps.meta_dockerhub.outputs.labels }}

            - name: Generate artifact attestation
              if: ${{ !github.event.repository.private }}
              uses: actions/attest-build-provenance@v1
              with:
                  subject-name: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
                  subject-digest: ${{ steps.push.outputs.digest }}
                  github-token: ${{ secrets.GITHUB_TOKEN }}

    publish_artifacts:
        name: Package and upload release artifacts
        runs-on: ubuntu-latest
        needs: release_please
        if: ${{ needs.release_please.outputs.release_created }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v3
              with:
                  node-version: 18

            - name: Install dependencies
              run: npm install --omit=dev

            - name: Move files to temporary directory
              run: |
                  mkdir -p ${{ runner.temp }}/release_build
                  cp -R . ${{ runner.temp }}/release_build/

            - name: Create zip archive
              run: |
                  # Create a zip archive excluding .git directory
                  ROOT_DIR=$(pwd)
                  cd ${{ runner.temp }}/release_build
                  zip -r $ROOT_DIR/${{ env.PACKAGE_NAME }}-${{ needs.release_please.outputs.version }}.zip . -x "*.git" "*.git/*"
                  cd $ROOT_DIR

            - name: Create tar.gz archive
              run: |
                  # Create a tar.gz archive excluding .git directory
                  tar --exclude='.git' --exclude='.git/*' -czf ${{ env.PACKAGE_NAME }}-${{ needs.release_please.outputs.version }}.tar.gz -C ${{ runner.temp }}/release_build/ .

            - name: Upload artifacts to release
              uses: softprops/action-gh-release@v2
              with:
                  files: |
                      ${{ env.PACKAGE_NAME }}-${{ needs.release_please.outputs.version }}.zip
                      ${{ env.PACKAGE_NAME }}-${{ needs.release_please.outputs.version }}.tar.gz
                  tag_name: ${{ needs.release_please.outputs.version_tag }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    deployment_status:
        name: Deployment Status Summary
        runs-on: ubuntu-latest
        needs: [release_please, publish_docker, publish_artifacts]
        if: always() && needs.release_please.outputs.release_created
        steps:
            - name: Generate deployment report
              run: |
                  echo "# Deployment Status Report" >> $GITHUB_STEP_SUMMARY
                  echo "**Version:** ${{ needs.release_please.outputs.version }}" >> $GITHUB_STEP_SUMMARY
                  echo "**Tag:** ${{ needs.release_please.outputs.version_tag }}" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "## Component Status:" >> $GITHUB_STEP_SUMMARY
                  
                  if [ "${{ needs.release_please.result }}" = "success" ]; then
                    echo "‚úÖ **NPM Package:** Published successfully" >> $GITHUB_STEP_SUMMARY
                    echo "   - URL: https://www.npmjs.com/package/haraka-plugin-wildduck/v/${{ needs.release_please.outputs.version }}" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "‚ùå **NPM Package:** Failed to publish" >> $GITHUB_STEP_SUMMARY
                  fi
                  
                  if [ "${{ needs.publish_docker.result }}" = "success" ]; then
                    echo "‚úÖ **Docker Image:** Built and pushed successfully" >> $GITHUB_STEP_SUMMARY
                    echo "   - DockerHub: \`docker pull ${{ secrets.DOCKERHUB_USERNAME }}/haraka-plugin-wildduck:${{ needs.release_please.outputs.version_tag }}\`" >> $GITHUB_STEP_SUMMARY
                    echo "   - GHCR: \`docker pull ghcr.io/${{ github.repository }}:${{ needs.release_please.outputs.version_tag }}\`" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "‚ùå **Docker Image:** Failed to build/push" >> $GITHUB_STEP_SUMMARY
                  fi
                  
                  if [ "${{ needs.publish_artifacts.result }}" = "success" ]; then
                    echo "‚úÖ **GitHub Release:** Created with artifacts" >> $GITHUB_STEP_SUMMARY
                    echo "   - URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.release_please.outputs.version_tag }}" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "‚ùå **GitHub Release:** Failed to create" >> $GITHUB_STEP_SUMMARY
                  fi