on:
    push:
        branches:
            - master
    pull_request:
        types: [closed]
        branches:
            - master

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.event.repository.name }}
    PACKAGE_NAME: ${{ github.event.repository.name }}

name: release
jobs:
    check_for_release:
        runs-on: ubuntu-latest
        # Only run on push to master or merged PRs
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
        outputs:
            should_release: ${{ steps.check.outputs.should_release }}
            version: ${{ steps.check.outputs.version }}
            version_tag: ${{ steps.check.outputs.version_tag }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Prepare release
              id: check
              run: |
                  # Always release for any commit to master or merged PR
                  echo "should_release=true" >> $GITHUB_OUTPUT
                  
                  # Get current version from package.json
                  CURRENT_VERSION=$(node -p "require('./package.json').version")
                  
                  echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
                  echo "version_tag=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
                  echo "Will release version: $CURRENT_VERSION"

    create_release:
        needs: check_for_release
        if: ${{ needs.check_for_release.outputs.should_release == 'true' }}
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ needs.check_for_release.outputs.version_tag }}
                  name: Release ${{ needs.check_for_release.outputs.version }}
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Notify deployment success
              if: success()
              run: |
                  if [[ -n "${{ secrets.ZONE_WEBHOOK_URL }}" ]]; then
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"channel":"haraka-plugin-changelog", "text":"üöÄ *Release ${{ needs.check_for_release.outputs.version }}* deployed successfully!\n‚Ä¢ Docker: `docker pull ${{ secrets.DOCKERHUB_USERNAME }}/haraka-plugin-wildduck:${{ needs.check_for_release.outputs.version_tag }}`\n‚Ä¢ GitHub: https://github.com/${{ github.repository }}/releases/tag/${{ needs.check_for_release.outputs.version_tag }}"}' \
                    ${{ secrets.ZONE_WEBHOOK_URL }} || echo "Slack notification failed"
                  else
                    echo "ZONE_WEBHOOK_URL not configured, skipping notification"
                  fi

            - name: Notify deployment failure  
              if: failure()
              run: |
                  if [[ -n "${{ secrets.ZONE_WEBHOOK_URL }}" ]]; then
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"channel":"haraka-plugin-changelog", "text":"‚ùå *Release deployment FAILED* for commit ${{ github.sha }}\nCheck: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
                    ${{ secrets.ZONE_WEBHOOK_URL }} || echo "Slack notification failed"
                  else
                    echo "ZONE_WEBHOOK_URL not configured, skipping notification"
                  fi

    test:
        name: Run tests
        runs-on: ubuntu-latest
        needs: check_for_release
        if: ${{ needs.check_for_release.outputs.should_release == 'true' }}
        strategy:
            matrix:
                node: [16, 18, 20]
        steps:
            - uses: actions/checkout@v4
            - name: Use Node.js ${{ matrix.node }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node }}
            - run: npm install
            - run: npm test

    publish_npm:
        name: Publish to NPM
        runs-on: ubuntu-latest
        needs: [check_for_release, test]
        if: ${{ needs.check_for_release.outputs.should_release == 'true' }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            
            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: 18
                  registry-url: 'https://registry.npmjs.org'
            
            - name: Install dependencies
              run: npm install
            
            - name: Publish to NPM
              run: npm publish
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    publish_docker:
        name: Create and publish a Docker image
        runs-on: ubuntu-latest

        permissions:
            contents: read
            packages: write
            attestations: write
            id-token: write

        needs: [check_for_release, create_release, test]
        if: ${{ needs.check_for_release.outputs.should_release == 'true' }}

        steps:
            - run: echo version ${{ needs.check_for_release.outputs.version_tag }}

            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3
              with:
                  platforms: 'arm64'

            - name: Set up Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v3
              with:
                  platforms: linux/arm64,linux/amd64

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.repository_owner }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata for DockerHub
              id: meta_dockerhub
              uses: docker/metadata-action@v5
              with:
                  images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
                  flavor: |
                      latest=auto
                  tags: |
                      type=semver,pattern={{version}},value=${{ needs.check_for_release.outputs.version_tag }}
                      type=semver,pattern={{major}}.{{minor}},value=${{ needs.check_for_release.outputs.version_tag }}
                      type=semver,pattern={{major}},value=${{ needs.check_for_release.outputs.version_tag }}

            - name: Extract metadata for GitHub Registry
              id: meta_ghcr
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ github.repository }}
                  flavor: |
                      latest=auto
                  tags: |
                      type=semver,pattern={{version}},value=${{ needs.check_for_release.outputs.version_tag }}
                      type=semver,pattern={{major}}.{{minor}},value=${{ needs.check_for_release.outputs.version_tag }}
                      type=semver,pattern={{major}},value=${{ needs.check_for_release.outputs.version_tag }}

            - name: Build and push Docker image
              id: push
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: true
                  platforms: ${{ steps.buildx.outputs.platforms }}
                  tags: |
                      ${{ steps.meta_dockerhub.outputs.tags }}
                      ${{ steps.meta_ghcr.outputs.tags }}
                  labels: ${{ steps.meta_dockerhub.outputs.labels }}

            - name: Generate artifact attestation
              if: ${{ !github.event.repository.private }}
              uses: actions/attest-build-provenance@v1
              with:
                  subject-name: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
                  subject-digest: ${{ steps.push.outputs.digest }}
                  github-token: ${{ secrets.GITHUB_TOKEN }}

    publish_artifacts:
        name: Package and upload release artifacts
        runs-on: ubuntu-latest
        needs: [check_for_release, create_release, test]
        if: ${{ needs.check_for_release.outputs.should_release == 'true' }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v3
              with:
                  node-version: 18

            - name: Install dependencies
              run: npm install --omit=dev

            - name: Move files to temporary directory
              run: |
                  mkdir -p ${{ runner.temp }}/release_build
                  cp -R . ${{ runner.temp }}/release_build/

            - name: Create zip archive
              run: |
                  # Create a zip archive excluding .git directory
                  ROOT_DIR=$(pwd)
                  cd ${{ runner.temp }}/release_build
                  zip -r $ROOT_DIR/${{ env.PACKAGE_NAME }}-${{ needs.check_for_release.outputs.version }}.zip . -x "*.git" "*.git/*"
                  cd $ROOT_DIR

            - name: Create tar.gz archive
              run: |
                  # Create a tar.gz archive excluding .git directory
                  tar --exclude='.git' --exclude='.git/*' -czf ${{ env.PACKAGE_NAME }}-${{ needs.check_for_release.outputs.version }}.tar.gz -C ${{ runner.temp }}/release_build/ .

            - name: Upload artifacts to release
              uses: softprops/action-gh-release@v2
              with:
                  files: |
                      ${{ env.PACKAGE_NAME }}-${{ needs.check_for_release.outputs.version }}.zip
                      ${{ env.PACKAGE_NAME }}-${{ needs.check_for_release.outputs.version }}.tar.gz
                  tag_name: ${{ needs.check_for_release.outputs.version_tag }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    deployment_status:
        name: Deployment Status Summary
        runs-on: ubuntu-latest
        needs: [check_for_release, create_release, test, publish_npm, publish_docker, publish_artifacts]
        if: always() && needs.check_for_release.outputs.should_release == 'true'
        steps:
            - name: Generate deployment report
              run: |
                  echo "# Deployment Status Report" >> $GITHUB_STEP_SUMMARY
                  echo "**Version:** ${{ needs.check_for_release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
                  echo "**Tag:** ${{ needs.check_for_release.outputs.version_tag }}" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "## Component Status:" >> $GITHUB_STEP_SUMMARY
                  
                  if [ "${{ needs.create_release.result }}" = "success" ]; then
                    echo "‚úÖ **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
                    echo "   - URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.check_for_release.outputs.version_tag }}" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "‚ùå **GitHub Release:** Failed to create" >> $GITHUB_STEP_SUMMARY
                  fi
                  
                  if [ "${{ needs.test.result }}" = "success" ]; then
                    echo "‚úÖ **Tests:** All tests passed" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "‚ùå **Tests:** Tests failed" >> $GITHUB_STEP_SUMMARY
                  fi
                  
                  if [ "${{ needs.publish_npm.result }}" = "success" ]; then
                    echo "‚úÖ **NPM Package:** Published successfully" >> $GITHUB_STEP_SUMMARY
                    echo "   - Install: \`npm install @0xmail/haraka-plugin-wildduck@${{ needs.check_for_release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "‚ùå **NPM Package:** Failed to publish" >> $GITHUB_STEP_SUMMARY
                  fi
                  
                  if [ "${{ needs.publish_docker.result }}" = "success" ]; then
                    echo "‚úÖ **Docker Image:** Built and pushed successfully" >> $GITHUB_STEP_SUMMARY
                    echo "   - DockerHub: \`docker pull ${{ secrets.DOCKERHUB_USERNAME }}/haraka-plugin-wildduck:${{ needs.check_for_release.outputs.version_tag }}\`" >> $GITHUB_STEP_SUMMARY
                    echo "   - GHCR: \`docker pull ghcr.io/${{ github.repository }}:${{ needs.check_for_release.outputs.version_tag }}\`" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "‚ùå **Docker Image:** Failed to build/push" >> $GITHUB_STEP_SUMMARY
                  fi
                  
                  if [ "${{ needs.publish_artifacts.result }}" = "success" ]; then
                    echo "‚úÖ **Release Artifacts:** Created successfully" >> $GITHUB_STEP_SUMMARY
                    echo "   - ZIP and TAR.GZ archives attached to GitHub release" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "‚ùå **Release Artifacts:** Failed to create" >> $GITHUB_STEP_SUMMARY
                  fi